# Generated by Django 5.2 on 2025-04-30 16:13

from django.db import migrations


# Structure: { 'muscle_group_name': [ (exercise_name, activation_level), ... ], ... }
# Activation Levels: 'H' (High), 'M' (Medium), 'L' (Low)
EXERCISE_DATA = {
    'Front Deltoid': [
        ('Flat/Decline Press', 'M'),
        ('Incline Press', 'M'),
        ('Shoulder Press', 'H'),
        ('Pec Deck/Straight/Decline Cable Fly', 'L'),
        ('Low to High Cable Fly', 'M'),
        ('Lateral Raise', 'L'),
        ('Dip', 'M'),
        ('Push Up', 'M'),
    ],
    'Side Deltoid': [
        ('Shoulder Press', 'H'),
        ('Lateral Raise', 'H'),
    ],
    'Rear Deltoid': [
        ('Lat Row', 'H'),
        ('High Row', 'H'),
        ('Pull Up', 'M'),
        ('Lat Pulldown', 'M'),
        ('Reverse Pec Deck', 'H'),
        ('Face Pull', 'H'),
    ],
    'Traps': [
        ('Lat Row', 'M'),
        ('High Row', 'H'),
        ('Pull Up', 'M'),
        ('Lat Pulldown', 'M'),
        ('Lateral Raise', 'M'),
        ('RDL', 'L'),
        ('Deadlift', 'L'),
        ('Squat', 'L'),
        ('Hip Thrust/Glute Bridge', 'L'),
        ('Reverse Pec Deck', 'M'),
        ('Face Pull', 'H'),
    ],
    'Lats': [
        ('Lat Row', 'H'),
        ('High Row', 'M'),
        ('Pull Up', 'H'),
        ('Lat Pulldown', 'H'),
        ('DB Pullover', 'M'),
        ('Cable Pullover', 'H'),
        ('RDL', 'L'),
        ('Deadlift', 'L'),
        ('Squat', 'L'),
        ('Hip Thrust/Glute Bridge', 'L'),
        ('PJR Pullover', 'L'),
    ],
    'Erectors': [
        ('RDL', 'H'),
        ('Deadlift', 'H'),
        ('Squat', 'H'),
        ('Hip Thrust/Glute Bridge', 'M'),
        ('Glute Ham Raise', 'M'),
    ],
    'Upper Chest': [
        ('Flat/Decline Press', 'H'),
        ('Close Grip Bench/JM Press', 'M'),
        ('Incline Press', 'H'),
        ('Shoulder Press', 'M'),
        ('Pec Deck/Straight/Decline Cable Fly', 'H'),
        ('Low to High Cable Fly', 'H'),
        ('Push Up', 'H'),
        ('Dip', 'H'),
    ],
    'Mid Chest': [
        ('Flat/Decline Press', 'H'),
        ('Close Grip Bench/JM Press', 'M'),
        ('Incline Press', 'H'),
        ('Cable Pullover', 'M'),
        ('Pec Deck/Straight/Decline Cable Fly', 'H'),
        ('Low to High Cable Fly', 'H'),
        ('Push Up', 'H'),
        ('Dip', 'M'),
    ],
    'Lower Chest': [
        ('Flat/Decline Press', 'H'),
        ('Close Grip Bench/JM Press', 'M'),
        ('Incline Press', 'M'),
        ('DB Pullover', 'H'),
        ('Pec Deck/Straight/Decline Cable Fly', 'H'),
        ('Low to High Cable Fly', 'M'),
        ('PJR Pullover', 'H'),
        ('Push Up', 'H'),
        ('Dip', 'H'),
    ],
    'Biceps': [
        ('Lat Row', 'M'),
        ('High Row', 'M'),
        ('Pull Up', 'M'),
        ('Lat Pulldown', 'M'),
        ('Pec Deck/Straight/Decline Cable Fly', 'L'),
        ('Low to High Cable Fly', 'L'),
        ('Bicep Curl', 'H'),
        ('Hammer Curl', 'H'),
        ('Reverse Curl', 'M'),
        ('Preacher Curl', 'H'),
    ],
    'Forearms': [
        ('Lat Row', 'L'),
        ('High Row', 'L'),
        ('Pull Up', 'L'),
        ('Lat Pulldown', 'L'),
        ('Bicep Curl', 'M'),
        ('Hammer Curl', 'H'),
        ('Reverse Curl', 'H'),
        ('Preacher Curl', 'M'),
        ('Wrist Curl', 'H'),
    ],
    'Triceps': [
        ('DB Pullover', 'L'),
        ('Cable Pullover', 'L'),
        ('Flat/Decline Press', 'M'),
        ('Close Grip Bench/JM Press', 'H'),
        ('Incline Press', 'M'),
        ('Shoulder Press', 'M'),
        ('Skull Crusher', 'H'),
        ('Overhead Extension', 'H'),
        ('Triceps Pushdown', 'H'),
        ('PJR Pullover', 'H'),
        ('Dip', 'H'),
        ('Push Up', 'M'),
    ],
    'Quads': [
        ('Deadlift', 'M'),
        ('Squat', 'H'),
        ('Leg Press', 'H'),
        ('Hip Thrust/Glute Bridge', 'M'),
        ('Bulgarian Split Squat', 'H'),
        ('Walking Lunge', 'H'),
        ('Sissy Squat', 'H'),
    ],
    'Glutes': [
        ('RDL', 'H'),
        ('Deadlift', 'H'),
        ('Squat', 'H'),
        ('Leg Press', 'H'),
        ('Hip Thrust/Glute Bridge', 'H'),
        ('Glute Kickback', 'H'),
        ('Glute Ham Raise', 'H'),
        ('Bulgarian Split Squat', 'H'),
        ('Walking Lunge', 'H'),
        ('Abduction Machine', 'H'),
    ],
    'Hamstrings': [
        ('RDL', 'H'),
        ('Deadlift', 'M'),
        ('Squat', 'L'),
        ('Leg Press', 'L'),
        ('Hip Thrust/Glute Bridge', 'M'),
        ('Glute Ham Raise', 'H'),
    ],
    'Adductors': [
        ('RDL', 'H'),
        ('Deadlift', 'M'),
        ('Squat', 'H'),
        ('Leg Press', 'H'),
        ('Hip Thrust/Glute Bridge', 'M'),
        ('Bulgarian Split Squat', 'M'),
        ('Walking Lunge', 'M'),
        ('Adductor Machine', 'H'),
    ],
    'Calves': [
        ('Straight Leg Calf Raise', 'H'),
        ('Seated Calf Raise', 'H'),
    ],
    'Abs': [
        ('Crunch', 'H'),
        ('Pull Up', 'M'),
        ('RDL', 'M'),
        ('Deadlift', 'M'),
        ('Squat', 'M'),
        ('Hip Thrust/Glute Bridge', 'M'),
        ('Sissy Squat', 'M'),
        ('Hanging Leg Raise', 'H'),
    ],
}


# --- Data Loading Function ---

def load_initial_exercises(apps, schema_editor):
    """
    Loads initial MuscleGroup, Exercise, and ExerciseMuscleActivation data.
    """
    # Get the historical versions of models for this migration
    MuscleGroup = apps.get_model('api', 'MuscleGroup')
    Exercise = apps.get_model('api', 'Exercise')
    ExerciseMuscleActivation = apps.get_model('api', 'ExerciseMuscleActivation')

    print("\nLoading initial fitness data...") # Optional progress message

    muscle_group_objects = {}
    exercise_objects = {}

    for group_name, exercises in EXERCISE_DATA.items():
        # Create or get Muscle Group
        muscle_group, created = MuscleGroup.objects.get_or_create(name=group_name)
        muscle_group_objects[group_name] = muscle_group
        if created:
            print(f"  Created Muscle Group: {group_name}")

        for exercise_name, activation_level in exercises:
            # Create or get Exercise
            if exercise_name not in exercise_objects:
                exercise, created = Exercise.objects.get_or_create(name=exercise_name)
                exercise_objects[exercise_name] = exercise
                if created:
                    print(f"    Created Exercise: {exercise_name}")
            else:
                exercise = exercise_objects[exercise_name]

            # Create the Activation Link
            activation, created = ExerciseMuscleActivation.objects.get_or_create(
                exercise=exercise,
                muscle_group=muscle_group,
                # Defaults activation_level if not found, but we provide it
                defaults={'activation_level': activation_level}
            )
            # If it already existed, update the activation level just in case
            if not created and activation.activation_level != activation_level:
                 activation.activation_level = activation_level
                 activation.save()
                 print(f"      Updated activation for {exercise_name} - {group_name} to {activation_level}")
            elif created:
                 print(f"      Linked {exercise_name} to {group_name} ({activation_level})")

    print("Finished loading initial fitness data.")


# --- Optional: Function to Reverse the Operation ---
# It's good practice to provide a way to undo the data loading,
# though for initial data, simply deleting might be complex if users
# have already linked workouts/plans to this data.
# A simple approach might just delete *all* data loaded here,
# but be CAREFUL if this migration runs on an existing database.

def unload_initial_exercises(apps, schema_editor):
    """
    Removes the initial data. Be cautious using this.
    """
    MuscleGroup = apps.get_model('api', 'MuscleGroup')
    Exercise = apps.get_model('api', 'Exercise')
    ExerciseMuscleActivation = apps.get_model('api', 'ExerciseMuscleActivation')

    print("\nUnloading initial fitness data (use with caution)...")

    # Get names from the data structure to only delete what this migration added
    group_names = list(EXERCISE_DATA.keys())
    exercise_names = set()
    for exercises in EXERCISE_DATA.values():
        for name, _ in exercises:
            exercise_names.add(name)

    # Delete in reverse order of dependency
    ExerciseMuscleActivation.objects.filter(
        exercise__name__in=exercise_names,
        muscle_group__name__in=group_names
    ).delete()
    print(f"  Deleted activations for {len(exercise_names)} exercises in {len(group_names)} groups.")

    Exercise.objects.filter(name__in=exercise_names).delete()
    print(f"  Deleted {len(exercise_names)} exercises.")

    MuscleGroup.objects.filter(name__in=group_names).delete()
    print(f"  Deleted {len(group_names)} muscle groups.")

    print("Finished unloading initial fitness data.")


# --- Migration Operations ---

class Migration(migrations.Migration):

    # Add dependency on the migration that created the models
    dependencies = [
        ('api', '0001_initial'),
    ]

    operations = [
        # Run the Python function to load data
        migrations.RunPython(load_initial_exercises, reverse_code=unload_initial_exercises),
    ]

